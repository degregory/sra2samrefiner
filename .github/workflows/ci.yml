name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Job 1: Check that pixi environment builds
  pixi-environment:
    name: Pixi Environment Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Pixi
        uses: prefix-dev/setup-pixi@v0.8.1
        with:
          cache: true
          cache-write: ${{ github.event_name == 'push' && github.ref_name == 'main' }}
          
      - name: Verify Pixi Lock File
        run: pixi install --locked
        
      - name: Test Basic Commands
        run: |
          pixi run --help || echo "No run commands defined, checking info"
          pixi info
          
      - name: Verify Bioinformatics Tools
        run: |
          pixi run samtools --version
          pixi run minimap2 --version
          pixi run nextflow -version
          pixi run seqkit version
          
      - name: Test Python Environment
        run: |
          pixi run python --version
          pixi run python -c "import pysam, loguru, pandas, polars; print('Python deps OK')"

  # Job 2: Check that PyPI dependencies solve with UV
  uv-dependencies:
    name: UV Dependency Resolution 
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Install UV
        uses: astral-sh/setup-uv@v3
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          
      - name: Test UV Dependency Resolution
        run: |
          echo "Testing UV dependency resolution..."
          uv sync
          
      - name: Create UV Virtual Environment
        run: |
          uv sync
          
      - name: Test Python Imports in UV Environment
        run: |
          uv run python -c "
          import Bio
          import loguru  
          import pandas
          import polars
          import pysam
          import typer
          print('All PyPI dependencies import successfully')
          "

  # Job 3: Python linting and tests
  python-quality:
    name: Python Lints and Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Pixi
        uses: prefix-dev/setup-pixi@v0.8.1
        with:
          cache: true

      - name: Install UV
        uses: astral-sh/setup-uv@v3
        with:
          cache: true
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          
      - name: Install Dependencies
        run: pixi install --locked
        
      - name: Run Ruff Linting
        run: |
          uv run ruff check bin
          uv run ruff format --check bin
          
      - name: Run Python Tests
        run: |
          uv run pytest -v --cov=bin --cov-report=xml --cov-report=term-missing
          
      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v4
        if: always()
        with:
          file: ./coverage.xml
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

  # Job 4: End-to-end pipeline test with sample data
  pipeline-integration:
    name: Pipeline Integration Test
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Pixi
        uses: prefix-dev/setup-pixi@v0.8.1
        with:
          cache: true
          
      - name: Install Dependencies
        run: pixi install --locked
        
      - name: Verify Assets Exist
        run: |
          echo "Checking required assets..."
          ls -la assets/
          test -f assets/test-accessions.txt
          test -f assets/sars2.fasta  
          test -f assets/sars2.gbk
          echo "All assets present"
          
      - name: Create Minimal Test Accession List
        run: |
          # Use only first accession for faster CI testing
          head -n 1 assets/test-accessions.txt > assets/ci-test-accessions.txt
          echo "Testing with accession: $(cat assets/ci-test-accessions.txt)"
          
      - name: Test Nextflow Version
        run: |
          pixi run nextflow -version
          
      - name: Run Pipeline Dry Run
        run: |
          pixi run nextflow run main.nf \
            --accession_list assets/ci-test-accessions.txt \
            --ref_fasta assets/sars2.fasta \
            --ref_gbk assets/sars2.gbk \
            --end_trim_bases 0 \
            --max_concurrent_downloads 1 \
            --sam_refiner_procs 2 \
            -profile containerless \
            -preview
            
      - name: Run Pipeline with Sample Data
        run: |
          pixi run nextflow run main.nf \
            --accession_list assets/ci-test-accessions.txt \
            --ref_fasta assets/sars2.fasta \
            --ref_gbk assets/sars2.gbk \
            --end_trim_bases 0 \
            --max_concurrent_downloads 1 \
            --sam_refiner_procs 2 \
            -profile containerless \
            -work-dir work-ci \
            --results results-ci
            
      - name: Check Pipeline Results
        run: |
          echo "Checking pipeline outputs..."
          ls -la results-ci/ || echo "No results directory created"
          
          # Check if we got expected outputs (allowing for failures due to network/SRA issues)
          if [ -d "results-ci" ]; then
            find results-ci/ -name "*.tsv" -o -name "*.cram" -o -name "*.html" | head -10
            echo "Pipeline completed successfully"
          else
            echo "Warning: Pipeline may have failed due to network/SRA download issues"
            echo "This is acceptable for CI as it tests the pipeline structure"
          fi
          
      - name: Upload Pipeline Artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: pipeline-results
          path: |
            results-ci/
            report.html
            .nextflow.log
          retention-days: 7

  # Job 5: Standalone Python script tests
  python-scripts:
    name: Python Script Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install UV
        uses: astral-sh/setup-uv@v3
        with:
          cache: true
          
      - name: Install Dependencies  
        run: pixi install --locked
        
      - name: Test Standalone Scripts
        run: |
          echo "Testing standalone Python scripts..."
          
          # Test the slicing bug test script
          uv run tests/test_slicing_bug.py
          
          # Test the CIGAR logic script  
          uv run tests/test_cigar_logic.py
          
          # Test edge cases analysis script
          uv run tests/test_edge_cases.py
          
          # Test single-end logic script
          uv run tests/test_single_end_logic.py
          
          # Test fix verification script
          uv run tests/test_fix_verification.py
          
          # Test the main module can be imported
          uv run python -c "
          import sys
          sys.path.insert(0, 'bin')
          from trim_aligned_reads import TrimPolicy
          print('Main module imports successfully')
          "
          
      - name: Test CLI Interface
        run: |
          # Test that the CLI shows help without errors
          uv run python bin/trim_aligned_reads.py --help
